#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'yaml'
# require 'net/ssh'
# require 'slop'
# require 'json'

Bundler.require


class UBNT2NAG

  def opts
    @opts ||= Slop.parse do
      banner "Usage: #{$0} [options] command\n  commands: status_cgi, mca_status"

      on 'h', 'host=', 'Hostname: [user@]host[:port]'
      on 'u', 'user=', 'Username'
      on 'p', 'password=', 'Password', argument: :optional
      on 'k', 'key=', 'Path to private key', argument: :optional
      on 'v', 'verbose', 'Enable verbose mode', argument: :optional
    end

    unless @opts[:host]
      puts @opts
      exit
    end
    @opts
  end

  def logger
    unless @logger
      @logger = Logger.new(STDERR)
      @logger.level = opts.verbose? ? Logger::DEBUG : Logger::WARN
    end
    @logger
  end


  def ssh_exec cmd
    host = opts[:host]
    user, host = host.split('@') if host =~ /@/
    host, port = host.split(':')
    port ||= 22
    user ||= opts[:user] if opts[:user]

    params = { port: port }
    params[:logger] = logger if opts[:verbose]
    params[:password] = opts[:password] if opts[:password]
    params[:keys] = [opts[:key]] if opts[:key]

    stdout = ""
    Net::SSH.start(host, user, params) do |ssh|
      ssh.exec!(cmd) do |channel, stream, data|
        stdout << data if stream == :stdout
      end
    end
    logger.debug stdout
    logger.debug "-" * 50
    stdout
  end

  def ccq val
    val = val.to_i
    val == 100 ? val : val / 10
  end

  def status_cgi
    stdout = ssh_exec "/usr/www/status.cgi"
    stdout.gsub!('Content-Type: application/json', '')
    h = JSON.load stdout
    logger.debug "Hash: #{h.to_yaml}"
    puts "OK|'signal:#{h['wireless']['signal']}'" +
          ";;;-100;0'noise'=#{h['wireless']['noise']};;;" +
          "-100;0'ccq'=#{ccq h['wireless']['ccq']};;100%" +
          ";30%;'airmaxqual'=75%;;;;'airmaxcap'=71%;;;;"
  end

  def mca_status
    stdout = ssh_exec "/usr/sbin/mca-status"
    # ping -q -c 1 -W 1 8.8.8.8 | grep 'round-trip' | tr '/=' ' ' | awk '{print "ping="$6}'
    lines = stdout.split("\n")
    h = {}
    lines.each do |line|
      line.chomp!
      next if line.empty?
      line.split(',').each do |kv|
        key, value = kv.split '='
        h[key] = value
      end
    end
    puts "UBNT OK: #{h['deviceName']}, #{h['deviceId']}, #{h['essid']}," +
          " #{h['freq']}, #{h['platform']}, #{h['lanSpeed']}, 0d:0h:1m, #{h['firmwareVersion']} |" +
          " 'rxdata'=#{h['wlanRxBytes']}c;;;;'txdata'=#{h['wlanTxBytes']}c;;;;" +
          "'signal'=#{h['signal']};-78;-83;-100;0'noise'=#{h['noise']};-91;-89;" +
          "-100;0'rxrate'=#{h['wlanRxRate']};30;10;0;270'txrate'=#{h['wlanTxRate']}" +
          ";30;10;0;270'ccq'=#{ccq h['ccq']}%;90;85;;'wcon'=#{h['wlanConnections']};20" +
          ";25;0;50'lavg'=#{h['loadavg']};5;10;0;30'uptime'=#{h['uptime']};300;100;0;1000"
  end

  def run
    cmd = ARGV[-1]
    if self.respond_to?(cmd)
      begin
        self.send(cmd)
        exit 0
      rescue Errno::ETIMEDOUT => e
        puts "CRITICAL| #{e.class} #{e.message}"
      rescue => e
        puts "WARNING| #{e.class} #{e.message}"
      end
    else
      puts opts.help
    end
    exit 1
  end

end


UBNT2NAG.new.run
